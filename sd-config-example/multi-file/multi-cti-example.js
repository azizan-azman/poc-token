const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary);

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"].filter(
    (transform) => transform !== "ts/size/px"
  ),
});

const tokenFilter = (type, theme) => (token) => {
  const filePath = `tokens-example/free/multi-file/cti/${theme}.json`;
  return theme === "global"
    ? token.attributes.type === type && token.filePath === filePath
    : token.filePath === filePath;
};

const generateFilesArr = (data, theme) => {
  const tokenSetCategory = Object.keys(data)[0];
  const tokenSetTypes = Object.keys(data[tokenSetCategory]);
  return tokenSetTypes.map((type) => ({
    filter: tokenFilter(type, theme),
    destination:
      theme === "global"
        ? `my-build3/${theme}/_${theme.toLowerCase()}.${type}.scss`
        : `my-build3/themes/${theme}/_${theme.toLowerCase()}.scss`,
    format: "scss/variables",
    options: {
      outputReferences: true,
      fileHeader: "autoGeneratedFileHeader",
    },
  }));
};

async function readTokenFile(tokenType) {
  const filePath = `tokens-example/free/multi-file/cti/${tokenType}.json`;
  try {
    const fileContent = await promises.readFile(filePath, "utf-8");
    return JSON.parse(fileContent);
  } catch (error) {
    console.error(`Error reading or parsing file: ${filePath}`, error);
    return null; // or throw an error if desired
  }
}

async function run() {
  const $tokenSetOrder = JSON.parse(
    await promises.readFile("tokens-example/free/multi-file/cti/$metadata.json")
  );
  const myconfigsPromises = $tokenSetOrder.tokenSetOrder.map(
    async (tokenSet) => {
      const data = await readTokenFile(tokenSet);

      return {
        source:
          tokenSet === "global"
            ? [`tokens-example/free/multi-file/cti/global.json`]
            : [
                `tokens-example/free/multi-file/cti/global.json`,
                `tokens-example/free/multi-file/cti/${tokenSet}.json`,
              ],
        fileHeader: {
          autoGeneratedFileHeader: () => {
            return [`Do not edit directly, this file was auto-generated`];
          },
        },
        platforms: {
          css: {
            transformGroup: "custom/tokens-studio",
            files: generateFilesArr(data, tokenSet),
          },
        },
      };
    }
  );

  const myconfigs = await Promise.all(myconfigsPromises);

  myconfigs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });
}
run();
