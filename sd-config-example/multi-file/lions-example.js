const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary);

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
});

const tokenFilter = (theme) => (token) => {
  const filePath = `tokens-example/paid/multi-file/tokens-lion/${theme}.json`;
  return token.filePath === filePath;
};

const generateFilesArr = (tokensCategories, theme) => {
  return tokensCategories.map((cat) => ({
    // filter: tokenFilter(theme),
    destination: `${cat}/${cat}-${theme.toLowerCase()}.scss`,
    format: "scss/variables",
    options: {
      outputReferences: true,
      fileHeader: "autoGeneratedFileHeader",
    },
  }));
};

async function run() {
  const $themes = JSON.parse(
    await promises.readFile(
      "tokens-example/paid/multi-file/tokens-lion/$themes.json"
    )
  );
  const configs = $themes.map((theme) => {
    const sourceEntries = Object.entries(theme.selectedTokenSets)
      .filter(([, val]) => val !== "disabled")
      .map(
        ([tokenset]) =>
          `tokens-example/paid/multi-file/tokens-lion/${tokenset}.json`
      );

    console.log("sourceEntries is", sourceEntries);
    console.log("theme is", theme);
    return {
      source: sourceEntries,
      fileHeader: {
        autoGeneratedFileHeader: () => {
          return [`Do not edit directly, this file was auto-generated`];
        },
      },
      platforms: {
        css: {
          transformGroup: "custom/tokens-studio",
          files: generateFilesArr(["button"], theme.name),
        },
      },
    };
  });

  configs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });
}
run();
