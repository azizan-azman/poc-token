const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary, {
  expand: {
    composition: true,
    typography: false,
    border: false,
    shadow: false,
  },
  excludeParentKeys: true,
});

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
});

const tokenFilter = (cat) => (token) => {
  console.log("cti is", token.attributes.category);
  return token.attributes.category === cat;
};

const generateFilesArr = (tokensCategories, theme) => {
  return tokensCategories.map((cat) => ({
    filter: tokenFilter(cat),
    destination: `my-build/${theme}/${theme.toLowerCase()}-${cat}.scss`,
    format: "scss/variables",
    options: {
      outputReferences: true,
      fileHeader: "autoGeneratedFileHeader",
    },
  }));
};

async function run() {
  // const $themes = JSON.parse(
  //   await promises.readFile("tokens/test.tokens.json")
  // );
  //   const configs = $themes.$metadata.tokenSetOrder.map((theme) => ({
  //     source: Object.entries(theme.selectedTokenSets)
  //       .filter(([, val]) => val !== "disabled")
  //       .map(([tokenset]) => `tokens-lion/${tokenset}.json`),
  //     fileHeader: {
  //       autoGeneratedFileHeader: () => {
  //         return [`Do not edit directly, this file was auto-generated`];
  //       },
  //     },
  //     platforms: {
  //       css: {
  //         transformGroup: "custom/tokens-studio",
  //         files: generateFilesArr(["button", "colors"], theme.name),
  //       },
  //     },
  //   }));
  //   configs.forEach((cfg) => {
  //     const sd = StyleDictionary.extend(cfg);
  //     sd.cleanAllPlatforms();
  //     sd.buildAllPlatforms();
  //   });

  const $tokenSetOrder = JSON.parse(
    await promises.readFile("tokens/test.tokens.json")
  );

  const myconfigs = $tokenSetOrder.$metadata.tokenSetOrder.map((theme) => ({
    source: ["tokens/*.tokens.json"],
    fileHeader: {
      autoGeneratedFileHeader: () => {
        return [`Do not edit directly, this file was auto-generated`];
      },
    },
    platforms: {
      css: {
        transformGroup: "custom/tokens-studio",
        files: generateFilesArr(["color"], theme),
      },
    },
  }));

  myconfigs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });

  //   const myconfig = {
  //     source: ["tokens/*.tokens.json"],
  //     fileHeader: {
  //       autoGeneratedFileHeader: () => {
  //         return [`Do not edit directly, this file was auto-generated`];
  //       },
  //     },
  //     platforms: {
  //       css: {
  //         transformGroup: "custom/tokens-studio",
  //         files: generateFilesArr(["color", "colors"], "global"),
  //       },
  //     },
  //   };

  //   const sd = StyleDictionary.extend(myconfig);
  //   sd.cleanAllPlatforms();
  //   sd.buildAllPlatforms();
}
run();
