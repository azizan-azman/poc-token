const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary);

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
});

const tokenFilter = (category, theme) => (token) => {
  const filePath = `tokens-example/free/multi-file/test-tokens/${theme}.json`;
  return token.attributes.category === category && token.filePath === filePath;
};

const generateFilesArr = (data, theme) => {
  const nestedKeys = Object.keys(data);
  return nestedKeys.map((category) => ({
    filter: tokenFilter(category, theme),
    destination:
      theme === "global" || theme === "semantics"
        ? `my-build3/${theme}/_${theme.toLowerCase()}.${category}.scss`
        : `my-build3/themes/${theme}/_${theme.toLowerCase()}.${category}.scss`,
    format: "scss/variables",
    options: {
      outputReferences: true,
      fileHeader: "autoGeneratedFileHeader",
    },
  }));
};

async function readTokenFile(tokenType) {
  const filePath = `tokens-example/free/multi-file/test-tokens/${tokenType}.json`;

  try {
    const fileContent = await promises.readFile(filePath, "utf-8");
    return JSON.parse(fileContent);
  } catch (error) {
    console.error(`Error reading or parsing file: ${filePath}`, error);
    return null; // or throw an error if desired
  }
}

async function run() {
  const $tokenSetOrder = JSON.parse(
    await promises.readFile(
      "tokens-example/free/multi-file/test-tokens/$metadata.json"
    )
  );
  console.log("$tokenSetOrder is", $tokenSetOrder);
  const myconfigsPromises = $tokenSetOrder.tokenSetOrder.map(async (theme) => {
    const data = await readTokenFile(theme);
    console.log("data is", Object.keys(data));
    console.log("theme is", theme);
    return {
      source: [`tokens-example/free/multi-file/test-tokens/*.json`],
      fileHeader: {
        autoGeneratedFileHeader: () => {
          return [`Do not edit directly, this file was auto-generated`];
        },
      },
      platforms: {
        css: {
          transformGroup: "custom/tokens-studio",
          files: generateFilesArr(data, theme),
        },
      },
    };
  });

  const myconfigs = await Promise.all(myconfigsPromises);

  myconfigs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });
}
run();
