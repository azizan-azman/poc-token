const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary, {
  expand: {
    composition: true,
    typography: false,
    border: false,
    shadow: false,
  },
  excludeParentKeys: true,
});

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
});

const tokenFilter = (cat) => (token) => {
  return token.attributes.category === cat;
};

const generateFilesArr = (tokensKeys, theme) => {
  const nestedObject = tokensKeys[theme];

  const nestedKeys = Object.keys(nestedObject);
  console.log("nestedKeys is", nestedKeys);
  return nestedKeys.map((cat) => ({
    filter: tokenFilter(cat),
    destination: `my-build2/${theme}/${theme.toLowerCase()}-${cat}.scss`,
    format: "scss/variables",
    options: {
      outputReferences: true,
      fileHeader: "autoGeneratedFileHeader",
    },
  }));
};

async function run() {
  const $tokenSetOrder = JSON.parse(
    await promises.readFile(
      "tokens-example/free/single-file/test-tokens/test2.tokens.json"
    )
  );

  const myconfigs = $tokenSetOrder.$metadata.tokenSetOrder.map((theme) => ({
    source: ["tokens-example/free/single-file/test-tokens/test2.tokens.json"],
    fileHeader: {
      autoGeneratedFileHeader: () => {
        return [`Do not edit directly, this file was auto-generated`];
      },
    },
    platforms: {
      css: {
        transformGroup: "custom/tokens-studio",
        files: generateFilesArr($tokenSetOrder, theme),
      },
    },
  }));

  myconfigs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });
}
run();
