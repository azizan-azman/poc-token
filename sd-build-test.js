const StyleDictionary = require("style-dictionary");
const {
  registerTransforms,
  transforms,
} = require("@tokens-studio/sd-transforms");
const { promises } = require("node:fs");

registerTransforms(StyleDictionary);

StyleDictionary.registerTransformGroup({
  name: "custom/tokens-studio",
  transforms: [...transforms, "attribute/cti", "name/cti/kebab"],
});

const tokenFilter = (cat) => (token) => {
  return token.attributes.category === cat;
};

const generateFilesArr = (tokensCategories, theme) => {
  return tokensCategories.map(
    (cat) => (
      {
        filter: tokenFilter(cat),
        destination: `${cat}/${cat}-${theme.toLowerCase()}.css`,
        format: "css/variables",
        options: {
          selector: ":host",
          fileHeader: "autoGeneratedFileHeader",
        },
      },
      {
        filter: tokenFilter(cat),
        destination: `${cat}/${cat}-${theme.toLowerCase()}.scss`,
        format: "scss/variables",
        options: {
          outputReferences: true,
          fileHeader: "autoGeneratedFileHeader",
        },
      }
    )
  );
};

async function run() {
  const $themes = JSON.parse(
    await promises.readFile("tokens-lion/$themes.json")
  );
  const configs = $themes.map((theme) => ({
    source: Object.entries(theme.selectedTokenSets)
      .filter(([, val]) => val !== "disabled")
      .map(([tokenset]) => `tokens-lion/${tokenset}.json`),
    fileHeader: {
      autoGeneratedFileHeader: () => {
        return [`Do not edit directly, this file was auto-generated`];
      },
    },
    platforms: {
      css: {
        transformGroup: "custom/tokens-studio",
        files: generateFilesArr(["button", "colors"], theme.name),
      },
    },
  }));

  console.log("configs are", configs);

  configs.forEach((cfg) => {
    const sd = StyleDictionary.extend(cfg);
    sd.cleanAllPlatforms();
    sd.buildAllPlatforms();
  });
}
run();
